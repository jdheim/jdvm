# syntax=docker/dockerfile:labs

#
# Â© 2024-2025 JDHeim
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

ARG UBUNTU_VERSION=${ubuntu.version}
ARG BUILDKIT_SBOM_SCAN_CONTEXT=${docker.buildx.build.sbom.scan.context}

FROM ubuntu:${UBUNTU_VERSION} AS dependencies
ENV DEBCONF_NOWARNINGS=yes \
    DEBIAN_FRONTEND=noninteractive
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
RUN echo "> Preparation..." \
        && apt-get -qq update \
        && apt-get -qq install --no-install-recommends ca-certificates curl git unzip wget xz-utils zip zsh > /dev/null \
        && mkdir --parents "/bash_completion.d" "/binaries" "/dev-tools" "/dev-tools-root" "/jdvm-templates/user" "/versions" \
    && echo "> Install Oh My Zsh..." \
        && ZSH="/opt/oh-my-zsh" bash -c "$(wget -q -O - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended > /dev/null 2>&1 \
        && mv "/opt/oh-my-zsh" "/dev-tools-root" \
        && printf "%s\n%s\n%s\n\n" \
            "# THIS FILE IS MANAGED BY THE CONTAINER AND REPLACED ON STARTUP." \
            "# DO NOT EDIT THIS FILE - ANY CHANGES WILL BE LOST." \
            "# TO ADD YOUR OWN CONFIGURATION, USE: *.local FILE." \
            | tee "/jdvm-templates/user/.zshrc" > /dev/null \
        && printf "%s\n%s\n%s\n%s\n%s\n%s\n\n" \
            "# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc." \
            "# Initialization code that may require console input (password prompts, [y/n]" \
            "# confirmations, etc.) must go above this block; everything else may go below." \
            "if [[ -r \"\${XDG_CACHE_HOME:-\$HOME/.cache}/p10k-instant-prompt-\${(%):-%n}.zsh\" ]]; then" \
            "  . \"\${XDG_CACHE_HOME:-\$HOME/.cache}/p10k-instant-prompt-\${(%):-%n}.zsh\"" \
            "fi" \
            | tee -a "/jdvm-templates/user/.zshrc" > /dev/null \
        && head -n $(($(grep -n "source \$ZSH/oh-my-zsh.sh" "/root/.zshrc" | cut -d: -f1) - 1)) "/root/.zshrc" | tee -a "/jdvm-templates/user/.zshrc" > /dev/null \
        && printf "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n\n" \
            "# TODO Workaround for https://github.com/zsh-users/zsh-autosuggestions/issues/351" \
            "ZSH_AUTOSUGGEST_CLEAR_WIDGETS=(" \
            "    history-search-forward" \
            "    history-search-backward" \
            "    history-beginning-search-forward" \
            "    history-beginning-search-backward" \
            "    history-beginning-search-forward-end" \
            "    history-beginning-search-backward-end" \
            "    history-substring-search-up" \
            "    history-substring-search-down" \
            "    up-line-or-beginning-search" \
            "    down-line-or-beginning-search" \
            "    up-line-or-history" \
            "    down-line-or-history" \
            "    accept-line" \
            "    copy-earlier-word" \
            "    bracketed-paste" \
            ")" \
            | tee -a "/jdvm-templates/user/.zshrc" > /dev/null \
        && printf "%s\n%s\n%s\n%s\n\n" \
            "# Load user-specific overrides" \
            "if [[ -f ~/.zshrc.local ]]; then" \
            "  . ~/.zshrc.local" \
            "fi" \
            | tee -a "/jdvm-templates/user/.zshrc" > /dev/null \
        && tail -n +"$(grep -n "source \$ZSH/oh-my-zsh.sh" "/root/.zshrc" | cut -d: -f1)" "/root/.zshrc" | tee -a "/jdvm-templates/user/.zshrc" > /dev/null \
        && printf "\n%s\n%s\n%s\n%s\n%s\n%s\n\n" \
            "# To customize prompt, run \"p10k configure\" or edit ~/.p10k.zsh" \
            "if [[ -f \~/.p10k.zsh ]]; then" \
            "  . ~/.p10k.zsh" \
            "elif [[ -f /etc/jdvm-templates/base/p10k.zsh ]]; then" \
            "  . /etc/jdvm-templates/base/p10k.zsh" \
            "fi" \
            | tee -a "/jdvm-templates/user/.zshrc" > /dev/null \
        && printf "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n" \
            "# Load aliases" \
            "if [[ -f ~/.aliases ]]; then" \
            "  . ~/.aliases" \
            "fi" \
            "# Load user-specific aliases" \
            "if [[ -f ~/.aliases.local ]]; then" \
            "  . ~/.aliases.local" \
            "fi" \
            "if [[ -f ~/.zshaliases.local ]]; then" \
            "  . ~/.zshaliases.local" \
            "fi" \
            | tee -a "/jdvm-templates/user/.zshrc" > /dev/null \
        && printf "%s\n%s\n%s\n%s\n\n" \
            "# Start D-Bus Session" \
            "if command -v start-dbus-session > /dev/null; then" \
            "  . start-dbus-session > /dev/null" \
            "fi" \
            | tee -a "/jdvm-templates/user/.zshrc" > /dev/null \
        && sed -i "s|.*\(ZSH_THEME=\)\".*|\1\"powerlevel10k/powerlevel10k\"|" "/jdvm-templates/user/.zshrc" \
        && sed -i "s|.*\(ZSH_CUSTOM=\).*|\1~/.oh-my-zsh/custom|" "/jdvm-templates/user/.zshrc" \
        && sed -i "s|.*\(plugins=\)(git.*|\1(zsh-autosuggestions zsh-syntax-highlighting aliases pj eza nmap zoxide git gitignore gh mvn sdk golang docker docker-compose kubectl helm)|" "/jdvm-templates/user/.zshrc" \
        && sed -i "/ZSH_CUSTOM=/a \\\n# Project paths for pj oh-my-zsh plugin\nPROJECT_PATHS=~/projects" "/jdvm-templates/user/.zshrc" \
        && sed -i "/ZSH_CUSTOM=/a \\\n# Location of the current completion dump file\nZSH_COMPDUMP=~/.zcompdump" "/jdvm-templates/user/.zshrc" \
        && git clone --depth=1 "https://github.com/zsh-users/zsh-autosuggestions.git" "/dev-tools-root/oh-my-zsh/plugins/zsh-autosuggestions" > /dev/null 2>&1 \
        && git clone --depth=1 "https://github.com/zsh-users/zsh-syntax-highlighting.git" "/dev-tools-root/oh-my-zsh/plugins/zsh-syntax-highlighting" > /dev/null 2>&1 \
        && git clone --depth=1 "https://github.com/romkatv/powerlevel10k.git" "/dev-tools-root/oh-my-zsh/themes/powerlevel10k" > /dev/null 2>&1 \
        && wget -q -O "gitstatus.tar.gz" "https://github.com/romkatv/gitstatus/releases/download/v${gitstatus.version}/gitstatusd-linux-x86_64.tar.gz" \
        && tar --extract --gzip --no-same-owner --directory="/dev-tools-root/oh-my-zsh/themes/powerlevel10k/gitstatus" --file="gitstatus.tar.gz" \
        && chmod +x "/dev-tools-root/oh-my-zsh/themes/powerlevel10k/gitstatus/gitstatusd-linux-x86_64" \
    && echo "> Install Kitty..." \
        && mkdir "/dev-tools/kitty" \
        && wget -q -O "kitty.txz" "https://github.com/kovidgoyal/kitty/releases/download/v${kitty.version}/kitty-${kitty.version}-x86_64.txz" \
        && tar --extract --no-same-owner --directory="/dev-tools/kitty" --file="kitty.txz" "bin" "lib" \
    && echo "> Install Firefox..." \
        && mkdir --parents "/dev-tools/firefox/distribution" \
        && wget -q -O "firefox.tar.xz" "https://ftp.mozilla.org/pub/firefox/releases/${firefox.version}/linux-x86_64/en-US/firefox-${firefox.version}.tar.xz" \
        && tar --extract --no-same-owner --directory="/dev-tools/firefox" --strip-components=1 --file="firefox.tar.xz" \
        && ln --symbolic "/etc/jdvm-config/betterfox-policies.json" "/dev-tools/firefox/distribution/policies.json" \
    && echo "> Install Upx..." \
        && wget -q -O "upx.tar.xz" "https://github.com/upx/upx/releases/download/v${upx.version}/upx-${upx.version}-amd64_linux.tar.xz" \
        && tar --extract --no-same-owner --directory="/binaries" --strip-components=1 --file="upx.tar.xz" --wildcards "*/upx" \
        && chmod +x "/binaries/upx" \
    && echo "> Install Git Filter-Repo..." \
        && wget -q -O "git-filter-repo.tar.xz" "https://github.com/newren/git-filter-repo/releases/download/v${git-filter-repo.version}/git-filter-repo-${git-filter-repo.version}.tar.xz" \
        && tar --extract --no-same-owner --directory="/binaries" --strip-components=1 --file="git-filter-repo.tar.xz" --wildcards "*/git-filter-repo" \
        && chmod g-w,+x "/binaries/git-filter-repo" \
        && printf "${git-filter-repo.version}\n" > "/versions/git-filter-repo.version" \
    && echo "> Install Git LFS..." \
        && wget -q -O "git-lfs.tar.gz" "https://github.com/git-lfs/git-lfs/releases/download/v${git-lfs.version}/git-lfs-linux-amd64-v${git-lfs.version}.tar.gz" \
        && tar --extract --gzip --no-same-owner --directory="/binaries" --strip-components=1 --file="git-lfs.tar.gz" --wildcards "*/git-lfs" \
        && chmod +x "/binaries/git-lfs" \
    && echo "> Install GitHub CLI..." \
        && wget -q -O "github-cli.tar.gz" "https://github.com/cli/cli/releases/download/v${github-cli.version}/gh_${github-cli.version}_linux_amd64.tar.gz" \
        && tar --extract --gzip --no-same-owner --directory="/binaries" --strip-components=2 --file="github-cli.tar.gz" --wildcards "*/gh" \
        && chmod +x "/binaries/gh" \
        && /binaries/gh completion -s bash > "/bash_completion.d/gh" \
    && echo "> Install SdkMan..." \
        && export SDKMAN_DIR="/dev-tools/sdkman" \
        && wget -q -O - "https://get.sdkman.io" | bash > /dev/null 2>&1 \
        && sed -i "/sdkman_auto_answer=/c sdkman_auto_answer=true" "${SDKMAN_DIR}/etc/config" \
        && sed -i "/sdkman_auto_env=/c sdkman_auto_env=true" "${SDKMAN_DIR}/etc/config" \
        && sed -i "/sdkman_colour_enable=/c sdkman_colour_enable=false" "${SDKMAN_DIR}/etc/config" \
        && sed -i "/sdkman_curl_connect_timeout=/c sdkman_curl_connect_timeout=10" "${SDKMAN_DIR}/etc/config" \
        && sed -i "/sdkman_curl_max_time=/c sdkman_curl_max_time=120" "${SDKMAN_DIR}/etc/config" \
        && sed -i "/sdkman_selfupdate_feature=/c sdkman_selfupdate_feature=false" "${SDKMAN_DIR}/etc/config" \
        && sed -i 's/\bfind\b/find -L/g' "${SDKMAN_DIR}/bin/sdkman-init.sh" "${SDKMAN_DIR}/src/sdkman-list.sh" "${SDKMAN_DIR}/src/sdkman-upgrade.sh" \
        && bash -c ". \"${SDKMAN_DIR}/bin/sdkman-init.sh\" \
    && echo \"> Install Java STS...\" \
        && sdk install \"java\" \"${jdk-sts.version}-${jdk.distribution}\" > /dev/null 2>&1 \
    && echo \"> Install Java LTS...\" \
        && sdk install \"java\" \"${jdk-lts.version}-${jdk.distribution}\" > /dev/null 2>&1 \
        && mkdir \"/dev-tools/java\" \
        && cp -r \"/dev-tools/sdkman/candidates/java/\"/* \"/dev-tools/java\" \
        && sdk uninstall --force \"java\" \"${jdk-lts.version}-${jdk.distribution}\" > /dev/null 2>&1 \
        && sdk uninstall --force \"java\" \"${jdk-sts.version}-${jdk.distribution}\" > /dev/null 2>&1 \
        && rm -r \"/dev-tools/sdkman/candidates/java\" \
    && echo \"> Install JBang...\" \
        && sdk install \"jbang\" \"${jbang.version}\" > /dev/null 2>&1 \
        && mkdir \"/dev-tools/jbang\" \
        && cp -r \"/dev-tools/sdkman/candidates/jbang/current\"/* \"/dev-tools/jbang\" \
        && sdk uninstall --force \"jbang\" \"${jbang.version}\" > /dev/null 2>&1 \
        && rm -r \"/dev-tools/sdkman/candidates/jbang\" \
    && echo \"> Install JMeter...\" \
        && sdk install \"jmeter\" \"${jmeter.version}\" > /dev/null 2>&1 \
        && mkdir \"/dev-tools/jmeter\" \
        && cp -r \"/dev-tools/sdkman/candidates/jmeter/current\"/* \"/dev-tools/jmeter\" \
        && sdk uninstall --force \"jmeter\" \"${jmeter.version}\" > /dev/null 2>&1 \
        && rm -r \"/dev-tools/sdkman/candidates/jmeter\" \
    && echo \"> Install JReleaser...\" \
        && sdk install \"jreleaser\" \"${jreleaser.version}\" > /dev/null 2>&1 \
        && mkdir \"/dev-tools/jreleaser\" \
        && cp -r \"/dev-tools/sdkman/candidates/jreleaser/current\"/* \"/dev-tools/jreleaser\" \
        && sdk uninstall --force \"jreleaser\" \"${jreleaser.version}\" > /dev/null 2>&1 \
        && rm -r \"/dev-tools/sdkman/candidates/jreleaser\" \
    && echo \"> Install Gradle...\" \
        && sdk install \"gradle\" \"${gradle.version}\" > /dev/null 2>&1 \
        && mkdir \"/dev-tools/gradle\" \
        && cp -r \"/dev-tools/sdkman/candidates/gradle/current\"/* \"/dev-tools/gradle\" \
        && sdk uninstall --force \"gradle\" \"${gradle.version}\" > /dev/null 2>&1 \
        && rm -r \"/dev-tools/sdkman/candidates/gradle\" \
    && echo \"> Install Maven...\" \
        && sdk install \"maven\" \"${mvn.version}\" > /dev/null 2>&1 \
        && mkdir \"/dev-tools/maven\" \
        && cp -r \"/dev-tools/sdkman/candidates/maven/current\"/* \"/dev-tools/maven\" \
        && sdk uninstall --force \"maven\" \"${mvn.version}\" > /dev/null 2>&1 \
        && rm -r \"/dev-tools/sdkman/candidates/maven\" \
    && echo \"> Install Spring Boot CLI...\" \
        && sdk install \"springboot\" \"${spring-boot-cli.version}\" > /dev/null 2>&1 \
        && mkdir \"/dev-tools/springboot\" \
        && cp -r \"/dev-tools/sdkman/candidates/springboot/current\"/* \"/dev-tools/springboot\" \
        && sdk uninstall --force \"springboot\" \"${spring-boot-cli.version}\" > /dev/null 2>&1 \
        && rm -r \"/dev-tools/sdkman/candidates/springboot\" \
        && sdk flush > /dev/null" \
    && echo "> Install Async Profiler..." \
        && mkdir "/dev-tools/async-profiler" \
        && wget -q -O "async-profiler.tar.gz" "https://github.com/async-profiler/async-profiler/releases/download/v${async-profiler.version}/async-profiler-${async-profiler.version}-linux-x64.tar.gz" \
        && tar --extract --gzip --no-same-owner \
            --directory="/dev-tools/async-profiler" --strip-components=1 --file="async-profiler.tar.gz" --wildcards "*/bin" "*/lib" \
    && echo "> Install Kafka..." \
        && mkdir "/dev-tools/kafka" \
        && wget -q -O "kafka.tar.gz" "https://downloads.apache.org/kafka/${kafka.version}/kafka_${kafka-scala.version}-${kafka.version}.tgz" \
        && tar --extract --gzip --no-same-owner \
            --directory="/dev-tools/kafka" --strip-components=1 --file="kafka.tar.gz" --exclude="*/windows" --wildcards "*/bin" "*/config" "*/libs" \
    && echo "> Install Node..." \
        && mkdir "/dev-tools/node" \
        && wget -q -O "node.tar.xz" "https://nodejs.org/dist/v${node.version}/node-v${node.version}-linux-x64.tar.xz" \
        && tar --extract --no-same-owner \
            --directory="/dev-tools/node" --strip-components=1 --file="node.tar.xz" \
            --exclude="*/bin/corepack" --exclude="*/lib/node_modules/corepack" --wildcards "*/bin" "*/include" "*/lib" \
        && export PATH="/dev-tools/node/bin:${PATH}" \
    && echo "> Update Npm..." \
        && npm install --silent --global npm@${npm.version} \
        && npm completion bash > "/bash_completion.d/npm" \
    && echo "> Install Pnpm/Yarn/Gulp CLI..." \
        && npm install --silent --global pnpm@${pnpm.version} gulp-cli@${gulp-cli.version} yarn@latest \
        && yarn set version "${yarn.version}" > /dev/null \
        && npm uninstall --silent --global yarn \
        && mkdir --parents "/dev-tools/node/lib/node_modules/yarn/bin" \
        && mv ".yarn/releases/yarn-${yarn.version}.cjs" "/dev-tools/node/lib/node_modules/yarn/bin/yarn.cjs" \
        && printf "{\n  \"name\": \"yarn\",\n  \"version\": \"${yarn.version}\",\n  \"license\": \"BSD-2-Clause\"\n}" > "/dev-tools/node/lib/node_modules/yarn/package.json" \
        && ln --symbolic "../lib/node_modules/yarn/bin/yarn.cjs" "/dev-tools/node/bin/yarn" \
        && ln --symbolic "../lib/node_modules/yarn/bin/yarn.cjs" "/dev-tools/node/bin/yarnpkg" \
        && pnpm completion bash > "/bash_completion.d/pnpm" \
        && rm -r "/dev-tools/node/share" \
    && echo "> Install UV..." \
        && wget -q -O - "https://github.com/astral-sh/uv/releases/download/${uv.version}/uv-installer.sh" | bash > /dev/null 2>&1 \
        && mv "/root/.local/bin/uv" "/binaries" \
        && mv "/root/.local/bin/uvx" "/binaries" \
    && echo "> Install Go..." \
        && mkdir --parents "/dev-tools/go" \
        && wget -q -O "go.tar.gz" "https://go.dev/dl/go${go.version}.linux-amd64.tar.gz" \
        && tar --extract --gzip --no-same-owner --directory="/dev-tools/go" --strip-components=1 --file="go.tar.gz" \
    && echo "> Install Docker Scout..." \
        && mkdir --parents "/docker/cli-plugins" \
        && wget -q -O "docker-scout.tar.gz" "https://github.com/docker/scout-cli/releases/download/v${docker-scout.version}/docker-scout_${docker-scout.version}_linux_amd64.tar.gz" \
        && tar --extract --gzip --no-same-owner --directory="/docker/cli-plugins" --file="docker-scout.tar.gz" "docker-scout" \
        && chmod +x "/docker/cli-plugins/docker-scout" \
    && echo "> Install Dive..." \
        && wget -q -O "dive.tar.gz" "https://github.com/wagoodman/dive/releases/download/v${dive.version}/dive_${dive.version}_linux_amd64.tar.gz" \
        && tar --extract --gzip --no-same-owner --directory="/binaries" --file="dive.tar.gz" "dive" \
        && chmod +x "/binaries/dive" \
    && echo "> Install Hadolint..." \
        && wget -q -O "/binaries/hadolint" "https://github.com/hadolint/hadolint/releases/download/v${hadolint.version}/hadolint-Linux-x86_64" \
        && chmod +x "/binaries/hadolint" \
    && echo "> Install Slim..." \
        && wget -q -O "slim.tar.gz" "https://github.com/slimtoolkit/slim/releases/download/${slim.version}/dist_linux.tar.gz" \
        && tar --extract --gzip --no-same-owner --directory="/binaries" --strip-components=1 --file="slim.tar.gz" --exclude="docker-slim" \
        && chmod +x "/binaries/mint" \
        && chmod +x "/binaries/mint-sensor" \
        && ln --symbolic "mint-sensor" "/binaries/slim-sensor" \
    && echo "> Install Kubectl..." \
        && wget -q -O "/binaries/kubectl" "https://dl.k8s.io/release/v${kubectl.version}/bin/linux/amd64/kubectl" \
        && chmod +x "/binaries/kubectl" \
        && /binaries/kubectl completion bash > "/bash_completion.d/kubectl" \
    && echo "> Install Kubectl Krew..." \
        && wget -q -O "/tmp/krew.tar.gz" "https://github.com/kubernetes-sigs/krew/releases/download/v${kubectl-krew.version}/krew-linux_amd64.tar.gz" \
        && tar --extract --gzip --no-same-owner --directory="/tmp" --file="/tmp/krew.tar.gz" > /dev/null 2>&1 \
        && /tmp/krew-linux_amd64 install krew > /dev/null 2>&1 \
        && mv "/root/.krew" "/dev-tools/krew" \
        && rm "/dev-tools/krew/bin/kubectl-krew" \
        && ln --symbolic "/opt/krew/store/krew/v${kubectl-krew.version}/krew" "/dev-tools/krew/bin/kubectl-krew" \
    && echo "> Install K3d..." \
        && wget -q -O "/binaries/k3d" "https://github.com/k3d-io/k3d/releases/download/v${k3d.version}/k3d-linux-amd64" \
        && chmod +x "/binaries/k3d" \
        && /binaries/k3d completion bash > "/bash_completion.d/k3d" \
    && echo "> Install Helm..." \
        && wget -q -O "helm.tar.gz" "https://get.helm.sh/helm-v${helm.version}-linux-amd64.tar.gz" \
        && tar --extract --gzip --no-same-owner --directory="/binaries" --strip-components=1 --file="helm.tar.gz" --wildcards "*/helm" \
        && chmod +x "/binaries/helm" \
        && /binaries/helm completion bash > "/bash_completion.d/helm" \
    && echo "> Cleanup..." \
        && find "/dev-tools" -type f \( -name "*.cmd" -or -name "*.bat" \) -exec rm -v {} +
COPY etc/jdvm-templates /jdvm-templates/
COPY scripts            /binaries/

FROM ubuntu:${UBUNTU_VERSION} AS main
ENV DEBCONF_NOWARNINGS=yes \
    DEBIAN_FRONTEND=noninteractive \
    DISPLAY=:0 \
    PULSE_SERVER=unix:/tmp/PulseServer \
    JDVM_USER=${image.user}
LABEL org.opencontainers.image.authors="https://github.com/${repo.owner}" \
      org.opencontainers.image.vendor="${repo.owner}" \
      org.opencontainers.image.title="${image.namespace}/${image.name}" \
      org.opencontainers.image.description="JDVM - A Virtual Machine for Java Developers, powered by Docker, available on Windows and Linux" \
      org.opencontainers.image.ref.name="${image.name}" \
      org.opencontainers.image.version="v${image.version}" \
      org.opencontainers.image.source="https://github.com/${repo.owner}/${image.name}" \
      org.opencontainers.image.url="https://hub.docker.com/r/${image.namespace}/${image.name}" \
      org.opencontainers.image.licenses="Apache-2.0 AND LicenseRef-ThirdParty" \
      org.opencontainers.image.revision="${git.revision}"
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
RUN echo "> Install wget..." \
        && apt-get -qq update \
        && apt-get -qq install --no-install-recommends wget ca-certificates > /dev/null \
    && echo "> Install mesa-vulkan-drivers..." \
        && wget -q -O "/tmp/mesa-vulkan-drivers.deb" "https://ppa.launchpadcontent.net/kisak/kisak-mesa/ubuntu/pool/main/m/mesa/mesa-vulkan-drivers_${mesa.drivers.version}~kisak${mesa.drivers.kisak}~${mesa.drivers.codename}_amd64.deb" \
        && wget -q -O "/tmp/mesa-libgallium.deb" "https://ppa.launchpadcontent.net/kisak/kisak-mesa/ubuntu/pool/main/m/mesa/mesa-libgallium_${mesa.drivers.version}~kisak${mesa.drivers.kisak}~${mesa.drivers.codename}_amd64.deb" \
        && wget -q -O "/tmp/libglx-mesa0.deb" "https://ppa.launchpadcontent.net/kisak/kisak-mesa/ubuntu/pool/main/m/mesa/libglx-mesa0_${mesa.drivers.version}~kisak${mesa.drivers.kisak}~${mesa.drivers.codename}_amd64.deb" \
        && wget -q -O "/tmp/libgbm1.deb" "https://ppa.launchpadcontent.net/kisak/kisak-mesa/ubuntu/pool/main/m/mesa/libgbm1_${mesa.drivers.version}~kisak${mesa.drivers.kisak}~${mesa.drivers.codename}_amd64.deb" \
        && wget -q -O "/tmp/libegl-mesa0.deb" "https://ppa.launchpadcontent.net/kisak/kisak-mesa/ubuntu/pool/main/m/mesa/libegl-mesa0_${mesa.drivers.version}~kisak${mesa.drivers.kisak}~${mesa.drivers.codename}_amd64.deb" \
        && wget -q -O "/tmp/libgl1-mesa-dri.deb" "https://ppa.launchpadcontent.net/kisak/kisak-mesa/ubuntu/pool/main/m/mesa/libgl1-mesa-dri_${mesa.drivers.version}~kisak${mesa.drivers.kisak}~${mesa.drivers.codename}_amd64.deb" \
        && apt-get -qq install --no-install-recommends \
            "/tmp/mesa-vulkan-drivers.deb" \
            "/tmp/mesa-libgallium.deb" \
            "/tmp/libglx-mesa0.deb" \
            "/tmp/libgbm1.deb" \
            "/tmp/libegl-mesa0.deb" \
            "/tmp/libgl1-mesa-dri.deb" \
            > /dev/null \
    && echo "> Install packages..." \
        && apt-get -qq install --no-install-recommends \
            # System
            atril \
            dbus \
            dbus-x11 \
            dconf-editor libglib2.0-bin \
            cron \
            engrampa \
            eom \
            iproute2 \
            iptables \
            iputils-ping \
            libreoffice-writer libreoffice-calc libreoffice-impress libreoffice-draw libreoffice-java-common \
            mesa-utils vulkan-tools \
            net-tools \
            procps \
            rsync \
            sudo \
            systemd \
            tzdata \
            udev \
            # Utilities
            bash-completion \
            bat \
            btop \
            curl \
            dnsutils \
            du-dust \
            entr \
            eza \
            fd-find \
            fontconfig \
            fzf \
            gedit gir1.2-peas-1.0 \
            gnome-keyring \
            gnupg \
            httpie \
            jq yq xq xmlstarlet \
            less \
            links \
            nano \
            nemo libgdk-pixbuf2.0-bin \
            neofetch \
            nmap \
            ripgrep \
            strace \
            tcpdump \
            tealdeer \
            tmux \
            tree \
            unzip \
            uuid-runtime \
            vim-tiny \
            xz-utils \
            yaru-theme-gtk yaru-theme-icon mate-icon-theme libcanberra-pulse libcanberra-gtk3-module \
            zip \
            zoxide \
            zsh \
            # X11 / Wayland
            x11-utils wayland-utils qtwayland5 \
            # Kitty Terminal dependency
            kitty-terminfo libxcb-xkb1 \
            # Mozilla Firefox dependency \
            pulseaudio libpci3 \
            # IntelliJ IDEA dependency
            libxtst6 \
            # Postman dependency
            libnss3 \
            # Python
            python3-dev \
            # Wails \
            build-essential libgtk-3-dev libwebkit2gtk-4.1-dev pkg-config nsis \
            > /dev/null \
    && echo "> Install packages from custom repositories..." \
        && wget -q -O "/tmp/containerd.deb" "https://download.docker.com/linux/ubuntu/dists/${ubuntu.codename}/pool/stable/amd64/containerd.io_${containerd.io.version}-1_amd64.deb" \
        && wget -q -O "/tmp/docker-ce.deb" "https://download.docker.com/linux/ubuntu/dists/${ubuntu.codename}/pool/stable/amd64/docker-ce_${docker.version}-1~ubuntu.${ubuntu.version}~${ubuntu.codename}_amd64.deb" \
        && wget -q -O "/tmp/docker-ce-cli.deb" "https://download.docker.com/linux/ubuntu/dists/${ubuntu.codename}/pool/stable/amd64/docker-ce-cli_${docker.version}-1~ubuntu.${ubuntu.version}~${ubuntu.codename}_amd64.deb" \
        && wget -q -O "/tmp/docker-buildx.deb" "https://download.docker.com/linux/ubuntu/dists/${ubuntu.codename}/pool/stable/amd64/docker-buildx-plugin_${docker-buildx.version}-1~ubuntu.${ubuntu.version}~${ubuntu.codename}_amd64.deb" \
        && wget -q -O "/tmp/docker-compose.deb" "https://download.docker.com/linux/ubuntu/dists/${ubuntu.codename}/pool/stable/amd64/docker-compose-plugin_${docker-compose.version}-1~ubuntu.${ubuntu.version}~${ubuntu.codename}_amd64.deb" \
        && wget -q -O "/tmp/git.deb" "https://launchpad.net/~git-core/+archive/ubuntu/ppa/+files/git_${git.version}-0ppa2~ubuntu${ubuntu.version}.1_amd64.deb" \
        && wget -q -O "/tmp/git-man.deb" "https://launchpad.net/~git-core/+archive/ubuntu/ppa/+files/git-man_${git.version}-0ppa2~ubuntu${ubuntu.version}.1_all.deb" \
        && apt-get -qq install --no-install-recommends \
            "/tmp/containerd.deb" \
            "/tmp/docker-ce.deb" \
            "/tmp/docker-ce-cli.deb" \
            "/tmp/docker-buildx.deb" \
            "/tmp/docker-compose.deb" \
            "/tmp/git.deb" \
            "/tmp/git-man.deb" \
            > /dev/null 2>&1 \
    && echo "> Install fonts..." \
        && mkdir "/usr/share/fonts/truetype/meslo" "/usr/share/fonts/truetype/noto" \
        && wget -q -O "/usr/share/fonts/truetype/meslo/MesloLGS-NF-Regular.ttf" "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf" \
        && wget -q -O "/usr/share/fonts/truetype/meslo/MesloLGS-NF-Bold.ttf" "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf" \
        && wget -q -O "/usr/share/fonts/truetype/meslo/MesloLGS-NF-Italic.ttf" "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf" \
        && wget -q -O "/usr/share/fonts/truetype/meslo/MesloLGS-NF-Bold-Italic.ttf" "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf" \
        && wget -q -O "/usr/share/fonts/truetype/noto/NotoColorEmoji.ttf" "https://github.com/googlefonts/noto-emoji/raw/main/fonts/NotoColorEmoji.ttf" \
    && echo "> Build font cache..." \
        && fc-cache -f \
    && echo "> Setup Systemd..." \
        && find "/etc/systemd/system" \
            "/lib/systemd/system" \
            -path "*.wants/*" \
            \( -name "*getty*" \
            -or -name "*apt-daily*" \
            -or -name "*systemd-timesyncd*" \
            -or -name "*systemd-logind*" \
            -or -name "*systemd-vconsole-setup*" \
            -or -name "*systemd-readahead*" \
            -or -name "*udev*" \) \
            -exec rm {} + \
        && systemctl set-default multi-user.target > /dev/null 2>&1 \
        && systemctl mask dev-hugepages.mount sys-fs-fuse-connections.mount network.service tmp.mount dpkg-db-backup.service motd-news.service > /dev/null 2>&1 \
        && cp "/usr/lib/tmpfiles.d/x11.conf" "/etc/tmpfiles.d/x11.conf" \
        && sed -i "s|.*/tmp/.*-unix.*|# &|" "/etc/tmpfiles.d/x11.conf" \
    && echo "> Setup ${JDVM_USER} user..." \
        && useradd --uid ${image.user.uid} --user-group --create-home --comment "Developer" --shell "/bin/bash" "${JDVM_USER}" \
        && printf "%s ALL=(ALL) NOPASSWD: ALL\n" "${JDVM_USER}" > "/etc/sudoers.d/${JDVM_USER}" \
    && echo "> Remove ubuntu user's home directory..." \
        && usermod --home "/nonexistent" ubuntu \
        && rm -r "/home/ubuntu" \
    && echo "> Setup skeletal user templates..." \
        && sed -i -e "s/\(HISTSIZE=\).*/\150000/" -e "s/\(HISTFILESIZE=\).*/\1/" "/etc/skel/.bashrc" "/root/.bashrc" \
        && bash -c 'shopt -s nullglob dotglob; \
            for skelFile in /etc/skel/*; do \
            sed -i \
                "1i\# THIS FILE IS MANAGED BY THE CONTAINER AND REPLACED ON STARTUP.\n# DO NOT EDIT THIS FILE - ANY CHANGES WILL BE LOST.\n# TO ADD YOUR OWN CONFIGURATION, USE: *.local FILE.\n" \
                "${skelFile}"; \
            [[ "$(basename "${skelFile}")" == ".bashrc" ]] && continue; \
            printf "\n%s\n%s\n%s\n%s\n" \
                "# Load user-specific overrides" \
                "if [[ -f ~/$(basename "${skelFile}").local ]]; then" \
                "  . ~/$(basename "${skelFile}").local" \
                "fi" \
                | tee -a "${skelFile}" > /dev/null; \
            done' \
        && printf "\n%s\n%s\n%s\n%s\n\n" \
            "# Load prompt string" \
            "if [[ -f ~/.ps1 ]]; then" \
            "  . ~/.ps1" \
            "fi" \
            | tee -a "/etc/skel/.bashrc" "/root/.bashrc" > /dev/null \
        && printf "%s\n%s\n%s\n%s\n\n" \
            "# Load user-specific overrides" \
            "if [[ -f ~/.bashrc.local ]]; then" \
            "  . ~/.bashrc.local" \
            "fi" \
            | tee -a "/etc/skel/.bashrc" "/root/.bashrc" > /dev/null \
        && printf "%s\n%s\n%s\n%s\n\n" \
            "# Load env variables" \
            "if [[ -f ~/.bash_env ]]; then" \
            "  . ~/.bash_env" \
            "fi" \
            | tee -a "/etc/skel/.bashrc" "/root/.bashrc" > /dev/null \
        && printf "%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n" \
            "# Load aliases" \
            "if [[ -f ~/.aliases ]]; then" \
            "  . ~/.aliases" \
            "fi" \
            "# Load user-specific aliases" \
            "if [[ -f ~/.aliases.local ]]; then" \
            "  . ~/.aliases.local" \
            "fi" \
            "if [[ -f ~/.bash_aliases.local ]]; then" \
            "  . ~/.bash_aliases.local" \
            "fi" \
            | tee -a "/etc/skel/.bashrc" "/root/.bashrc" > /dev/null \
        && printf "%s\n%s\n%s\n%s\n\n" \
            "# Start D-Bus Session" \
            "if command -v start-dbus-session > /dev/null; then" \
            "  . start-dbus-session > /dev/null" \
            "fi" \
            | tee -a "/etc/skel/.bashrc" "/root/.bashrc" > /dev/null \
        && printf "%s\n%s\n\n" \
            "# Init Zoxide" \
            "eval \"\$(zoxide init bash)\"" \
            | tee -a "/etc/skel/.bashrc" "/root/.bashrc" > /dev/null \
    && echo "> Setup local templates..." \
        && mkdir --parents "/etc/jdvm-templates/local" \
        && printf "%s\n%s\n" \
            "# USER CONFIGURATION FILE." \
            "# USE THIS FILE TO OVERRIDE OR EXTEND THE DEFAULT SETTINGS MANAGED BY THE CONTAINER." \
            | tee "/etc/jdvm-templates/local/.aliases.local" \
                "/etc/jdvm-templates/local/.bash_logout.local" \
                "/etc/jdvm-templates/local/.bashrc.local" \
                "/etc/jdvm-templates/local/.bash_aliases.local" \
                "/etc/jdvm-templates/local/.bash_env.local" \
                "/etc/jdvm-templates/local/.profile.local" \
                "/etc/jdvm-templates/local/.zlogout.local" \
                "/etc/jdvm-templates/local/.zprofile.local" \
                "/etc/jdvm-templates/local/.zshaliases.local" \
                "/etc/jdvm-templates/local/.zshenv.local" \
                "/etc/jdvm-templates/local/.zshrc.local" > /dev/null \
        && printf "%s\n%s\n\n%s\n%s\n%s\n" \
            "# USER CONFIGURATION FILE." \
            "# USE THIS FILE TO OVERRIDE OR EXTEND THE DEFAULT SETTINGS MANAGED BY THE CONTAINER." \
            "# TZ can be used to to set a time zone different to the system zone for a user." \
            "# The zones listed in /usr/share/zoneinfo/ can be used as reference." \
            "# export TZ=\"Europe/Warsaw\"" \
            > "/etc/jdvm-templates/local/.env.local" \
    && echo "> Setup User Dirs" \
        && mkdir "/root/.config" \
        && ln --symbolic "/etc/xdg/user-dirs.defaults" "/root/.config/user-dirs.dirs" \
    && echo "> Setup Bash" \
        && ln --symbolic "/etc/jdvm-templates/user/.aliases" "/root/.aliases" \
        && ln --symbolic "/etc/jdvm-templates/user/.bash_aliases" "/root/.bash_aliases" \
        && ln --symbolic "/etc/jdvm-templates/user/.bash_env" "/root/.bash_env" \
        && ln --symbolic "/etc/jdvm-templates/user/.env" "/root/.env" \
        && ln --symbolic "/etc/jdvm-templates/user/.ps1" "/root/.ps1" \
    && echo "> Setup Oh My Zsh..." \
        && ln --symbolic "/etc/jdvm-templates/user/.zlogout" "/root/.zlogout" \
        && ln --symbolic "/etc/jdvm-templates/user/.zprofile" "/root/.zprofile" \
        && ln --symbolic "/etc/jdvm-templates/user/.zshenv" "/root/.zshenv" \
        && ln --symbolic "/etc/jdvm-templates/user/.zshrc" "/root/.zshrc" \
        && mkdir --parents "/root/.cache/gitstatus" \
        && ln --symbolic "/opt/oh-my-zsh/themes/powerlevel10k/gitstatus/gitstatusd-linux-x86_64" "/root/.cache/gitstatus/gitstatusd-linux-x86_64" \
        && chsh -s "/bin/zsh" "root" \
        && chsh -s "/bin/zsh" "${JDVM_USER}" \
    && echo "> Setup Bat..." \
        && ln --symbolic "/usr/bin/batcat" "/usr/local/bin/bat" \
    && echo "> Setup Gedit..." \
        && dbus-run-session -- bash -c "gsettings set org.gnome.gedit.preferences.editor insert-spaces true \
            && gsettings set org.gnome.gedit.preferences.editor tabs-size 4 \
            && gsettings set org.gnome.gedit.preferences.editor style-scheme-for-dark-theme-variant oblivion \
            && gsettings set org.gnome.gedit.preferences.ui statusbar-visible false \
            && gsettings set org.gnome.gedit.preferences.ui theme-variant dark" > /dev/null 2>&1 \
        && xdg-mime default "org.gnome.gedit.desktop" "text/plain" \
        && mv "/root/.config/mimeapps.list" "/usr/share/applications/mimeapps.list" \
    && echo "> Setup Nemo..." \
        && dbus-run-session -- bash -c "gsettings set org.nemo.preferences click-double-parent-folder true \
            && gsettings set org.nemo.preferences desktop-is-home-dir true \
            && gsettings set org.nemo.preferences show-open-in-terminal-toolbar true \
            && gsettings set org.nemo.preferences show-reload-icon-toolbar true \
            && gsettings set org.nemo.preferences.menu-config background-menu-open-as-root false \
            && gsettings set org.nemo.preferences.menu-config selection-menu-open-as-root false" > /dev/null 2>&1 \
    && echo "> Setup Gnome Settings..." \
        && dbus-run-session -- bash -c "gsettings set org.cinnamon.desktop.default-applications.terminal exec kitty \
            && gsettings set org.cinnamon.desktop.interface gtk-theme Yaru-blue-dark \
            && gsettings set org.cinnamon.desktop.interface icon-theme Yaru \
            && gsettings set org.cinnamon.desktop.sound theme-name freedesktop \
            && gsettings set org.cinnamon.desktop.sound event-sounds true \
            && gsettings set org.cinnamon.desktop.sound input-feedback-sounds true \
            && gsettings set org.cinnamon.desktop.wm.preferences theme Yaru-blue-dark \
            && gsettings set org.gnome.desktop.default-applications.terminal exec kitty \
            && gsettings set org.gnome.desktop.interface color-scheme prefer-dark \
            && gsettings set org.gnome.desktop.interface gtk-theme Yaru-blue-dark \
            && gsettings set org.gnome.desktop.interface icon-theme Yaru \
            && gsettings set org.gnome.desktop.sound theme-name freedesktop \
            && gsettings set org.gnome.desktop.sound event-sounds true \
            && gsettings set org.gnome.desktop.sound input-feedback-sounds true \
            && gsettings set org.gnome.desktop.wm.preferences theme Yaru-blue-dark" > /dev/null 2>&1 \
        && mkdir --parents "/etc/jdvm-templates/base/dconf" \
        && mv "/root/.config/dconf/user" "/etc/jdvm-templates/base/dconf" \
        && ln --symbolic "/etc/jdvm-templates/base/dconf/user" "/root/.config/dconf/user" \
    && echo "> Setup Async Profiler..." \
        && printf "kernel.perf_event_paranoid=1\nkernel.kptr_restrict=0\n" > "/etc/sysctl.d/999-async-profiler.conf" \
    && echo "> Setup Docker..." \
        && usermod --append --groups "docker" "${JDVM_USER}" \
        && docker completion bash > "/etc/bash_completion.d/docker" \
        && ln --symbolic "/etc/jdvm-config/docker-daemon.json" "/etc/docker/daemon.json" \
    && echo "> Setup Apt Update Service..." \
        && ln --symbolic "/etc/jdvm-systemd/service/jdvm-apt-update.service" "/etc/systemd/system/jdvm-apt-update.service" \
    && echo "> Setup DBus Session Service..." \
        && ln --symbolic "/etc/jdvm-systemd/service/jdvm-dbus-session.service" "/etc/systemd/system/jdvm-dbus-session.service" \
    && echo "> Setup Launchee Service..." \
        && ln --symbolic "/etc/jdvm-systemd/service/launchee.service" "/etc/systemd/system/launchee.service" \
    && echo "> Make sure everything in /home/${JDVM_USER} belongs to ${JDVM_USER} user..." \
        && chown --recursive "${JDVM_USER}":"${JDVM_USER}" "/home/${JDVM_USER}" \
    && echo "> Create ${image.name}.version file..." \
        # TODO To be replaced by jdvm
        && mkdir "/etc/versions" \
        && printf "${image.version}\n" > "/etc/versions/${image.name}.version" \
    && echo "> Home of ${JDVM_USER}" \
        && tree -a "/home/${JDVM_USER}" \
    && echo "> Home of root" \
        && tree -a "/root" \
    && echo "> Cleanup..." \
        && apt-get -qq autoremove --purge \
        && apt-get -qq clean \
        && find "/root/.cache" -mindepth 1 -maxdepth 1 -not -name "gitstatus" -exec rm -r {} + \
        && find "/var/cache" -mindepth 1 -maxdepth 1 -not -name "fontconfig" -exec rm -r {} + \
        && rm -rf "/root/.launchpadlib" \
            "/root/.ssh" \
            "/root/.wget-hsts" \
            "/run"/* \
            "/tmp"/* \
            "/usr/local/share/.cache"/* \
            "/var/lib/apt/lists"/* \
            "/var/log"/* \
            "/var/tmp"/*
COPY --from=dependencies --chown="${JDVM_USER}:${JDVM_USER}"    /dev-tools                           /opt/
COPY --from=dependencies                                        /dev-tools-root                      /opt/
COPY --from=dependencies                                        /binaries                            /usr/local/bin/
COPY --from=dependencies                                        /docker                              /usr/local/lib/docker/
COPY --from=dependencies                                        /bash_completion.d                   /etc/bash_completion.d/
COPY --from=dependencies                                        /versions                            /etc/versions/
COPY --from=dependencies                                        /jdvm-templates                      /etc/jdvm-templates/
COPY                                                            etc                                  /etc/
COPY                                                            licenses                             /licenses/
COPY                                                            docker-entrypoint.d                  /docker-entrypoint.d/
RUN echo "> Enable Git LFS..." \
        && git lfs install --system > /dev/null \
    && echo "> Enable Apt Update Service..." \
        && systemctl enable jdvm-apt-update.service > /dev/null 2>&1 \
    && echo "> Enable DBus Session Service..." \
        && systemctl enable jdvm-dbus-session.service > /dev/null 2>&1 \
    && echo "> Enable Launchee Service..." \
        && systemctl enable launchee.service > /dev/null 2>&1
ARG BUILD_TIMESTAMP
LABEL org.opencontainers.image.created="${BUILD_TIMESTAMP}"
HEALTHCHECK --interval=5s --retries=3 --timeout=10s CMD systemctl status launchee.service | grep "Active: active (running)" || exit 1
ENTRYPOINT [ "/docker-entrypoint.d/docker-entrypoint.sh" ]
