#!/bin/bash
# DISPLAY DEPENDENCY VERSIONS INSTALLED ON THE SYSTEM

#
# Â© 2024-2025 JDHeim
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

set -o errexit  # ABORT ON NON-ZERO EXIT STATUS
set -o pipefail # DON'T HIDE ERRORS WITHIN PIPES

# CONSTANTS
readonly ARGS=( "$@" )
readonly SEPARATOR=$(printf "%.s#" {1..75})
readonly OUTPUT_FILE="/tmp/versions.md"
readonly -A EXCLUDE_IN_OUTPUT_MODE=(["JDVM"]=1 ["Kernel"]=1 ["Docker Server"]=1 ["Kubectl Server"]=1)
readonly -A ICONS_IN_OUTPUT_MODE=(["System"]=":computer:" \
  ["Apps"]=":robot:" \
  ["Version Control System"]=":herb:" \
  ["Java"]=":coffee:" \
  ["JavaScript"]=":electron:" \
  ["Python"]=":snake:" \
  ["Cloud"]=":cloud:")
readonly -A URLS_IN_OUTPUT_MODE=(["Ubuntu"]="https://wiki.ubuntu.com/Releases" \
  ["Kitty Terminal"]="https://github.com/kovidgoyal/kitty/releases" \
  ["Tmux"]="https://github.com/tmux/tmux/releases" \
  ["Firefox"]="https://www.mozilla.org/en-US/firefox/releases/" \
  ["Betterfox"]="https://github.com/yokoffing/Betterfox/releases" \
  ["Upx"]="https://github.com/upx/upx/releases" \
  ["IntelliJ IDEA"]="https://www.jetbrains.com/idea/whatsnew/" \
  ["DBeaver"]="https://github.com/dbeaver/dbeaver/releases" \
  ["Postman"]="https://www.postman.com/release-notes/postman-app/" \
  ["Keystore Explorer"]="https://github.com/kaikramer/keystore-explorer/releases" \
  ["Git"]="https://git-scm.com/downloads" \
  ["Git Filter-Repo"]="https://github.com/newren/git-filter-repo/releases" \
  ["Git LFS"]="https://github.com/git-lfs/git-lfs/releases" \
  ["GitHub CLI"]="https://github.com/cli/cli/releases" \
  ["Java LTS"]="https://www.java.com/releases/" \
  ["Java STS"]="https://www.java.com/releases/" \
  ["SDKMan"]="https://github.com/sdkman/sdkman-cli/releases" \
  ["JBang"]="https://github.com/jbangdev/jbang/releases" \
  ["JMeter"]="https://github.com/apache/jmeter/releases" \
  ["JReleaser"]="https://github.com/jreleaser/jreleaser/releases" \
  ["Gradle"]="https://github.com/gradle/gradle/releases" \
  ["Maven"]="https://maven.apache.org/docs/history.html" \
  ["Spring Boot CLI"]="https://github.com/spring-projects/spring-boot/releases" \
  ["Async Profiler"]="https://github.com/async-profiler/async-profiler/releases" \
  ["Kafka"]="https://kafka.apache.org/downloads" \
  ["Node"]="https://github.com/nodejs/node/releases" \
  ["Npm"]="https://github.com/npm/cli/releases" \
  ["Pnpm"]="https://github.com/pnpm/pnpm/releases" \
  ["Yarn"]="https://github.com/yarnpkg/berry/releases" \
  ["Gulp CLI"]="https://github.com/gulpjs/gulp-cli/releases" \
  ["Python"]="https://docs.python.org/3/whatsnew/changelog.html" \
  ["UV"]="https://github.com/astral-sh/uv/releases" \
  ["Go"]="https://go.dev/doc/devel/release" \
  ["Containerd"]="https://github.com/containerd/containerd/releases" \
  ["Docker"]="https://github.com/moby/moby/releases" \
  ["Docker Buildx"]="https://github.com/docker/buildx/releases" \
  ["Docker Compose"]="https://github.com/docker/compose/releases" \
  ["Docker Scout"]="https://github.com/docker/scout-cli/releases" \
  ["Dive"]="https://github.com/wagoodman/dive/releases" \
  ["Hadolint"]="https://github.com/hadolint/hadolint/releases" \
  ["Slim"]="https://github.com/slimtoolkit/slim/releases" \
  ["Kubectl"]="https://github.com/kubernetes/kubernetes/releases" \
  ["Kubectl Krew"]="https://github.com/kubernetes-sigs/krew/releases" \
  ["K3d"]="https://github.com/k3d-io/k3d/releases" \
  ["K3s"]="https://github.com/k3s-io/k3s/releases" \
  ["Helm"]="https://github.com/helm/helm/releases")
# COLORS
readonly RESET="\033[0m"
readonly GREEN="\033[1;32m"
readonly YELLOW="\033[1;33m"

main() {
  options "${ARGS[@]}"
  logTitle
  logSection "System"
  logVersion "JDVM" "$(getJDVMVersion)"
  logVersion "Ubuntu" "$(getUbuntuVersion)"
  logVersion "Kernel" "$(getKernelVersion)"
  logVersion "Kitty Terminal" "$(getKittyVersion)"
  logVersion "Tmux" "$(getTmuxVersion)"
  logVersion "Firefox" "$(getFirefoxVersion)"
  logVersion "Betterfox" "$(getBetterfoxVersion)"
  logVersion "Upx" "$(getUpxVersion)"
  logIntelliJIdeaVersion
  logDBeaverVersion
  logPostmanVersion
  logKeystoreExplorerVersion
  if [[ -n "${appVersions}" ]]; then
    printf "%s\n%b" "$(logSection "Apps")" "${appVersions}"
  fi
  logSection "Version Control System"
  logVersion "Git" "$(getGitVersion)"
  logVersion "Git Filter-Repo" "$(getGitFilterRepoVersion)"
  logVersion "Git LFS" "$(getGitLfsVersion)"
  logVersion "GitHub CLI" "$(getGitHubCliVersion)"
  logSection "Java"
  logVersion "Java LTS" "$(getJavaLtsVersion)"
  logVersion "Java STS" "$(getJavaStsVersion)"
  logVersion "JBang" "$(getJBangVersion)"
  logVersion "JMeter" "$(getJMeterVersion)"
  logVersion "JReleaser" "$(getJReleaserVersion)"
  logVersion "Gradle" "$(getGradleVersion)"
  logVersion "Maven" "$(getMavenVersion)"
  logVersion "Spring Boot CLI" "$(getSpringBootVersion)"
  logVersion "SDKMan" "$(getSDKManVersion)"
  logVersion "Async Profiler" "$(getAsyncProfilerVersion)"
  logVersion "Kafka" "$(getKafkaVersion)"
  logSection "JavaScript"
  logVersion "Node" "$(getNodeVersion)"
  logVersion "Npm" "$(getNpmVersion)"
  logVersion "Pnpm" "$(getPnpmVersion)"
  logVersion "Yarn" "$(getYarnVersion)"
  logVersion "Gulp CLI" "$(getGulpCliVersion)"
  logSection "Python"
  logVersion "Python" "$(getPythonVersion)"
  logVersion "UV" "$(getUvVersion)"
  logSection "Cloud"
  logVersion "Go" "$(getGoVersion)"
  logVersion "Containerd" "$(getContainerdVersion)"
  logVersion "Docker Client" "$(getDockerClientVersion)"
  logVersion "Docker Server" "$(getDockerServerVersion)"
  logVersion "Docker Buildx" "$(getDockerBuildxVersion)"
  logVersion "Docker Compose" "$(getDockerComposeVersion)"
  logVersion "Docker Scout" "$(getDockerScoutVersion)"
  logVersion "Dive" "$(getDiveVersion)"
  logVersion "Hadolint" "$(getHadolintVersion)"
  logVersion "Slim" "$(getSlimVersion)"
  logVersion "Kubectl Client" "$(getKubectlClientVersion)"
  logVersion "Kubectl Server" "$(getKubectlServerVersion)"
  logVersion "Kubectl Krew" "$(getKubectlKrewVersion)"
  logVersion "K3d" "$(getK3dVersion)"
  logVersion "Helm" "$(getHelmVersion)"
  logSeparator
  if [[ "${OUTPUT_MODE}" == "true" ]]; then
    printf "Versions saved to: %s\n" "${OUTPUT_FILE}"
  fi
}

options() {
  while (( ${#} > 0 )); do
    case "${1}" in
      -o | --output) readonly OUTPUT_MODE="true";;
      *) help;;
    esac
    shift
  done
}

help() {
  cat << EOF
Usage: $(basename "$0")

Display dependency versions installed on the system
EOF
  exit 1
}

logTitle() {
  if [[ "${OUTPUT_MODE}" == "true" ]]; then
    printf "## Versions\n" > "${OUTPUT_FILE}"
  fi
}

logSection() {
  local sectionName="${1}"
  if [[ "${OUTPUT_MODE}" == "true" ]]; then
    printf "\n### %s %s\n" "${ICONS_IN_OUTPUT_MODE[${sectionName}]}" "${sectionName}" >> "${OUTPUT_FILE}"
  else
    logSeparator
    printf "%b#%b %b%-71s%b %b#%b\n" \
      "${YELLOW}" "${RESET}" \
      "${GREEN}" "${sectionName^^}" "${RESET}"\
      "${YELLOW}" "${RESET}"
    logSeparator
  fi
}

logSeparator() {
  if [[ "${OUTPUT_MODE}" != "true" ]]; then
    printf "%b%s%b\n" "${YELLOW}" "${SEPARATOR}" "${RESET}"
  fi
}

logVersion() {
  local dependency="${1}"
  if [[ "${OUTPUT_MODE}" == "true" ]]; then
    if [[ ! ${EXCLUDE_IN_OUTPUT_MODE[${1}]} ]]; then
      if [[ "${dependency}" == *" Client" ]]; then
        dependency="${dependency% Client}"
      fi
      if [[ ${URLS_IN_OUTPUT_MODE[${dependency}]} ]]; then
        if [[ "${dependency}" == "K3d" ]]; then
          printf -- "- [%s](%s) ([K3s](%s)) **%s**\n" "${dependency}" "${URLS_IN_OUTPUT_MODE[${dependency}]}" "${URLS_IN_OUTPUT_MODE['K3s']}" "${2}" >> "${OUTPUT_FILE}"
        else
          printf -- "- [%s](%s) **%s**\n" "${dependency}" "${URLS_IN_OUTPUT_MODE[${dependency}]}" "${2}" >> "${OUTPUT_FILE}"
        fi
      else
        printf -- "- %s **%s**\n" "${dependency}" "${2}" >> "${OUTPUT_FILE}"
      fi
    fi
  else
    printf "%b|%b %-28s %b|%b %-40s %b|%b\n" \
      "${YELLOW}" "${RESET}" \
      "${dependency^^}" \
      "${YELLOW}" "${RESET}" \
      "${2}" \
      "${YELLOW}" "${RESET}"
  fi
}

getJDVMVersion() {
  if [[ -f "/etc/versions/${image.name}.version" ]]; then
    cat "/etc/versions/${image.name}.version"
  fi
}

getUbuntuVersion() {
  grep "VERSION=" "/etc/os-release" | sed "s/.*=\"//;s/ .*//"
}

getKernelVersion() {
  uname -s -r | sed "s/.* //"
}

getKittyVersion() {
  if isPackageInstalled "kitty"; then
    kitty --version | sed "s/kitty //;s/ .*//"
  fi
}

getTmuxVersion() {
  if isPackageInstalled "tmux"; then
    tmux -V | sed "s/tmux //"
  fi
}

getFirefoxVersion() {
  if isPackageInstalled "firefox"; then
    firefox --version | sed "s/.* //"
  fi
}

getBetterfoxVersion() {
  local profileDir
  profileDir="$(printf '%s\n' "${HOME}/.mozilla/firefox"/*.dev)"
  if [[ -d "${profileDir}" ]] && grep -q "\* Betterfox" "${profileDir}/user.js"; then
    grep -A2 "\* Betterfox" "${profileDir}/user.js" | grep "version" | sed "s/.*: //;s/ .*//"
  fi
}

getUpxVersion() {
  if isPackageInstalled "upx"; then
    upx --version | grep -m 1 "upx" | sed "s/.* //"
  fi
}

logIntelliJIdeaVersion() {
  if [[ -d "${HOME}/apps/intellij-idea" ]]; then
    local appVersion="$(jq ".version" "${HOME}/apps/intellij-idea/product-info.json" | tr -d "\"")"
    appVersions+="$(logVersion "IntelliJ IDEA" "${appVersion}")\n"
  fi
}

logDBeaverVersion() {
  if [[ -d "${HOME}/apps/dbeaver" ]]; then
    local appVersion="$(grep "version=" "${HOME}/apps/dbeaver/.eclipseproduct" | sed "s/.*=//")"
    appVersions+="$(logVersion "DBeaver" "${appVersion}")\n"
  fi
}

logPostmanVersion() {
  if [[ -d "${HOME}/apps/postman" ]]; then
    local appVersion="$(jq ".version" "${HOME}/apps/postman/resources/app/package.json" | tr -d "\"")"
    appVersions+="$(logVersion "Postman" "${appVersion}")\n"
  fi
}

logKeystoreExplorerVersion() {
  if isPackageInstalled "kse"; then
    local appVersion="$(unzip -p "${HOME}/apps/keystore-explorer/kse.jar" "org/kse/version.properties" | grep "KSE.Version" | sed "s/.*=//")"
    appVersions+="$(logVersion "Keystore Explorer" "${appVersion}")\n"
  fi
}

getGitVersion() {
  if isPackageInstalled "git"; then
    git version | sed "s/.*version //"
  fi
}

getGitFilterRepoVersion() {
  if [[ -f "/usr/local/bin/git-filter-repo" ]]; then
    cat "/etc/versions/git-filter-repo.version"
  fi
}

getGitLfsVersion() {
  if isPackageInstalled "git-lfs"; then
    git lfs version | sed "s/.*\///;s/ (.*//"
  fi
}

getGitHubCliVersion() {
  if isPackageInstalled "gh"; then
    gh --version | grep gh | sed "s/.*version //;s/ (.*//"
  fi
}

getJavaLtsVersion() {
  if isPackageInstalled "java"; then
    java --version | grep "openjdk" | sed "s/openjdk \([^ ]*\) .*/\1/"
  fi
}

getJavaStsVersion() {
  if [[ -x "/opt/java/${jdk-sts.version}-${jdk.distribution}/bin/java" ]]; then
    "/opt/java/${jdk-sts.version}-${jdk.distribution}/bin/java" --version | grep "openjdk" | sed "s/openjdk \([^ ]*\) .*/\1/"
  fi
}

getJBangVersion() {
  if isPackageInstalled "jbang"; then
    jbang version
  fi
}

getJMeterVersion() {
  if isPackageInstalled "mvn"; then
    jmeter -n --version -j /dev/null 2>/dev/null | grep -m 1 -E "[0-9]+" | sed "s/.* \([0-9]\+\)/\1/"
  fi
}

getJReleaserVersion() {
  if isPackageInstalled "jreleaser"; then
    jreleaser --version | grep jreleaser | sed "s/.* //"
  fi
}

getGradleVersion() {
  if isPackageInstalled "gradle"; then
    gradle --version | grep -m 1 "Gradle " | sed -e "s/.* //" -e "s/\!//"
  fi
}

getMavenVersion() {
  if isPackageInstalled "mvn"; then
    mvn -B -v | grep "Apache Maven" | sed "s/Apache Maven \([^ ]*\).*/\1/"
  fi
}

getSpringBootVersion() {
  if isPackageInstalled "spring"; then
    spring --version | sed "s/.*v//"
  fi
}

getSDKManVersion() {
  if [[ -f "/opt/sdkman/var/version" ]]; then
    cat "/opt/sdkman/var/version"
  fi
}

getAsyncProfilerVersion() {
  if isPackageInstalled "asprof"; then
    asprof --version | sed "s/.*profiler //;s/ .*//"
  fi
}

getKafkaVersion() {
  if [[ -d "/opt/kafka" ]]; then
    ls "/opt/kafka/libs" | grep -m 1 "kafka-server" | sed "s/.*-//;s/.jar//"
  fi
}

getNodeVersion() {
  if isPackageInstalled "node"; then
    node --version | sed "s/v//"
  fi
}

getNpmVersion() {
  if isPackageInstalled "npm"; then
    npm --version
  fi
}

getPnpmVersion() {
  if isPackageInstalled "pnpm"; then
    pnpm --version
  fi
}

getYarnVersion() {
  if isPackageInstalled "yarn"; then
    yarn --version
  fi
}

getGulpCliVersion() {
  if isPackageInstalled "gulp"; then
    gulp --version | grep "CLI" | sed "s/.*: //"
  fi
}

getPythonVersion() {
  if isPackageInstalled "python3"; then
    python3 --version | sed "s/.* //"
  fi
}

getUvVersion() {
  if isPackageInstalled "uv"; then
    uv --version | sed "s/.* //"
  fi
}

getGoVersion() {
  if isPackageInstalled "go"; then
    go version | sed "s/.* go//;s/ .*//"
  fi
}

getContainerdVersion() {
  if isPackageInstalled "containerd"; then
    containerd --version | sed -e "s/.*io //" -e "s/ .*//"
  fi
}

getDockerClientVersion() {
  if isPackageInstalled "docker"; then
    docker version --format "{{.Client.Version}}"
  fi
}

getDockerServerVersion() {
  if isPackageInstalled "docker"; then
    docker version --format "{{.Server.Version}}"
  fi
}

getDockerBuildxVersion() {
  if isPackageInstalled "docker"; then
    docker buildx version | sed "s/.* v//;s/ .*//"
  fi
}

getDockerComposeVersion() {
  if isPackageInstalled "docker"; then
    docker compose version --short
  fi
}

getDockerScoutVersion() {
  if isPackageInstalled "docker"; then
    docker scout version | grep version | sed "s/.* v//;s/ (.*//"
  fi
}

getDiveVersion() {
  if isPackageInstalled "dive"; then
    dive --version | sed "s/.* //"
  fi
}

getHadolintVersion() {
  if isPackageInstalled "hadolint"; then
    hadolint --version | sed "s/.* //"
  fi
}

getSlimVersion() {
  if isPackageInstalled "slim"; then
    slim --version | sed "s/.*version [^|]*|[^|]*|.\.\([^|]*\)|.*/\1/"
  fi
}

getKubectlClientVersion() {
  if isPackageInstalled "kubectl"; then
    kubectl version --client | grep "Client Version:" | sed "s/.*v//"
  fi
}

getKubectlServerVersion() {
  if isPackageInstalled "k3d"; then
    k3d version | grep "k3s" | sed "s/.*v//;s/ (.*//"
  fi
}

getKubectlKrewVersion() {
  if isPackageInstalled "kubectl-krew"; then
    kubectl krew version | grep "GitTag" | sed "s/.*v//"
  fi
}

getK3dVersion() {
  if isPackageInstalled "k3d"; then
    k3d version | grep "k3d" | sed "s/.*v//"
  fi
}

getHelmVersion() {
  if isPackageInstalled "helm"; then
    helm version --template="Version: {{.Version}}" | sed "s/.*v//"
  fi
}

isPackageInstalled() {
  local package="${1}"
  command -v "${package}" >/dev/null
}

main
